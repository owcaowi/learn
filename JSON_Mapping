

---------------------
	JSON to Object 
---------------------

Stwórz POJO na podstawie Jsona:
http://www.jsonschema2pojo.org

Zaznacz dodatkowo:
- use primitive types
- serializable


---------------------
  Możliwe Problemy 
---------------------

Podstawowe problemy:

- zmieniła się nazwa pola ( łatwo zmienić dodając adnotację )
    GSON: @SerializedName("some_name")

- przyszedł null zamiast oczekiwanego typu (Stwórz serializator)

- przyszedł nieoczekiwany typ (zostanie sparsowany GSON, Jackson)

- nie przyszło w ogóle pole które miało przyjść
	GSON ( automatycznie )
	Jackson - @JsonIgnoreProperties(ignoreUnknown = true)




----------------------------------
  Deserializator / Serializator
---------------------------------- 

public class ExampleAdapter implements JsonDeserializer<Example> {

    @Override
    public Example deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {

        JsonObject obj = json.getAsJsonObject();

        /* Default */
        String name = new String("Jan Kowalski");
        int age = 66;
        String city = new String("Radom");

        if (!JsonNull.class.isInstance(obj.get("name")))
            name = obj.get("name").getAsString();

        if (obj.get("age") != null)
            age = obj.get("age").getAsInt();

        if (obj.get("city") != null)
            city = obj.get("city").getAsString();

        return new Example(name, age, city);
    }
}


Controler 
---------

	GsonBuilder gsonBuilder = new GsonBuilder();
    gsonBuilder.registerTypeAdapter(Example.class, new ExampleAdapter());
    Gson gson = gsonBuilder.create();

    Example obj = gson.fromJson(reader, Example.class);
